%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 56 199 539 598 
%%LanguageLevel: 2
%%Creator: CorelDRAW X6
%%Title: 000360_vintage_elements.eps
%%CreationDate: Tue Jun 23 22:58:55 2015
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X6 Version 16.3.0.1114
/EpsFile true def
%%BeginResource: procset wCorel16Dict 16.0 0
/wCorel16Dict 300 dict def wCorel16Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparationLevel1 1 0 0 0
gsave setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not def
/ColorSeparation/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
InRipSeparation{true}{ColorSeparationLevel1}ifelse}ifelse}ifelse def
/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors
get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors
known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}
ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode/OnHost ne
InRipSeparation AdobeDistiller or and}bind}{false}ifelse def/DocGrayScaleSpace
[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace[/DeviceCMYK]def
/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[0.9637 1.0000 0.8241
]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116 div}bind{500 div}
bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[{dup 0.206897 ge{dup
dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul}bind{dup 0.206897
ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000 mul}bind{dup
0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.8241 mul}bind]
>>]def/validate_cie_colorspace_whitepoint{load dup aload pop/WhitePoint get 1
1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE where{pop
/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint/DocGrayScaleSpace xd
DocGrayScaleSpace aload pop begin pop/DecodeA where{pop DecodeA type/arraytype
eq{DecodeA aload pop/DecodeA exch def}if}if end}if/DocRgbSpaceCIE where{pop
/DocRgbSpaceCIE validate_cie_colorspace_whitepoint/DocRgbSpace xd}if
/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE validate_cie_colorspace_whitepoint
/DocCmykSpace xd}if}bd/set_rendering_intent{Level3{findcolorrendering{
/ColorRendering findresource setcolorrendering}{dup/DefaultColorRendering eq{
pop}{/ColorRendering findresource setcolorrendering}}ifelse}{pop}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}def}ifelse
/setcustomcolor where SeparationMode/OnHost ne and{pop}{/tint_cmyk_color{5 -1
roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{CurrentInkName_5 eq{4
index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse
/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}repeat 3 copy
min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd/safe_setcolorspace{dup
currentcolorspace eq{pop}{setcolorspace}ifelse}bd/safe_setoverprint{dup type
/booleantype eq{dup currentoverprint ne{setoverprint}{pop}ifelse}{1 eq
setoverprint}ifelse}bd/is_cmyk_channel_name{/channel_name xd channel_name/Cyan
eq channel_name/Magenta eq or channel_name/Yellow eq or channel_name/Black eq
or{true}{false}ifelse}bd/is_rgb_channel_name{/channel_name xd channel_name/Red
eq channel_name/Green eq or channel_name/Blue eq or{true}{false}ifelse}bd
/is_spot_channel_name{/channel_name xd channel_name is_cmyk_channel_name
channel_name is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse
}bd/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSeparationLevel1{convert_to_cmyk/color get aload pop setcmykcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_set_color{SeparationMode/OnHost eq{separate_color{/set_color dexec
true}{pop currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1
SetGry true}ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{
currentdict false}bd/convert_to_cmyk{currentdict}bd currentdict end def
/GrayscaleColorSpec ColorSpec 9 dict copy begin/names{/Black}def/num 1 def
/ColorModel/Grayscale def/ColorSpace DocGrayScaleSpace def/separate_color{
currentdict false SeparationMode/OnHost eq{SeparationPlateName/Black eq{
SeparateInColor{pop convert_to_cmyk true}{pop true}ifelse}if}if}bd
/convert_to_cmyk{0 0 0 color aload pop 1 exch sub create_cmyk_color}bd
currentdict end def/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin
/color exch 1 array astore def/ColorSpace DocGrayScaleSpace def currentdict end
}bd/RgbColorSpec ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3
def/ColorModel/Rgb def/ColorSpace DocRgbSpace def/separate_color{
convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{color aload pop
convert_rgb_to_cmyk create_cmyk_color}bd currentdict end def/create_rgb_color{
RgbColorSpec 9 dict copy begin 3 array astore/color exch def/ColorSpace
DocRgbSpace def currentdict end}bd/CmykColorSpec ColorSpec 9 dict copy begin
/names{/Cyan/Magenta/Yellow/Black}def/num 4 def/ColorModel/Cmyk def/ColorSpace
DocCmykSpace def/separate_color{currentdict false SeparationPlateIndex 0 ge
SeparationPlateIndex 3 le and{color SeparationPlateIndex get dup 0 gt{3 1 roll
pop pop SeparateInColor{0 0 0 4 SeparationPlateIndex roll create_cmyk_color
true}{1 exch sub create_grayscale_color true}ifelse}{pop}ifelse}if}bd
/convert_to_cmyk{currentdict}bd currentdict end def/create_cmyk_color{
CmykColorSpec 9 dict copy begin 4 array astore/color exch def/ColorSpace
DocCmykSpace def currentdict end}bd/SpotColorSpec ColorSpec 9 dict copy begin
/num 1 def/ColorModel/Spot def/set_color{ColorSeparationLevel1{color aload pop
get_cmyk_alternative_color/color get aload pop names aload pop
findcmykcustomcolor exch setcustomcolor}{ColorSpace safe_setcolorspace color
aload pop setcolor}ifelse}bd/separate_color{currentdict false
SeparationPlateIndex 4 eq{names aload pop SeparationPlateName eq{color aload
pop dup 0 gt{3 1 roll pop pop SeparateInColor{pop convert_to_cmyk true}{1 exch
sub create_grayscale_color true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{
/alternativeSpace ColorSpace 2 get def/tintTransformProc ColorSpace 3 get def
alternativeSpace DocCmykSpace eq{color aload pop tintTransformProc
create_cmyk_color}{alternativeSpace DocRgbSpace eq{color aload pop
tintTransformProc create_rgb_color/convert_to_cmyk dexec}{alternativeSpace
DocGrayScaleSpace eq{0 0 0 color aload pop 1 sub create_cmyk_color}{0 0 0 1
create_cmyk_color}ifelse}ifelse}ifelse}bd/get_cmyk_alternative_color{
/alternativeSpace ColorSpace 2 get def alternativeSpace DocCmykSpace eq{
alternativeColor aload pop create_cmyk_color}{alternativeSpace DocRgbSpace eq{
alternativeColor aload pop create_rgb_color/convert_to_cmyk dexec}{
alternativeSpace DocGrayScaleSpace eq{alternativeColor aload pop
create_grayscale_color/convert_to_cmyk dexec}{0 0 0 1 create_cmyk_color}ifelse
}ifelse}ifelse}bd currentdict end def/create_spot_colorspace{load
/alternativeSpace xd/alternativeColor xd/name xd[/Separation name
alternativeSpace[alternativeColor alternativeSpace/spot_tint_transform_proc cvx
]cvx]}bd/create_spot_color{SpotColorSpec 9 dict copy begin dup type/arraytype
ne{create_spot_colorspace}if/ColorSpace xd/color exch 1 array astore def
ColorSpace 1 get 1 array astore/names xd currentdict end}bd/DevicenColorSpec
SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def/set_color{Level3{
ColorSpace safe_setcolorspace color aload pop setcolor}{ColorSpace 2 get
setcolorspace color aload pop ColorSpace 3 get exec setcolor}ifelse}bd
/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup names
exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex 0 ge
{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/set_color{ColorSeparationLevel1{DocGrayScaleSpace
safe_setcolorspace color aload pop 1 exch sub setcolor}{ColorSpace
safe_setcolorspace color aload pop setcolor}ifelse}bd/separate_color{
SeparateInColor{convert_to_cmyk true}{color aload pop 1 exch sub
create_grayscale_color true}ifelse}bd/convert_to_cmyk{color aload pop dup dup
dup create_cmyk_color}bd currentdict end def/create_registration_color{
RegistrationColorSpec 9 dict copy begin 1 array astore/color xd currentdict end
}bd/LabColorSpec ColorSpec 9 dict copy begin/names{/L/a/b}def/num 3 def
/ColorModel/Lab def/ColorSpace DocLabSpace def/separate_color{convert_to_cmyk
/separate_color dexec}bd/convert_to_cmyk{0 0 0 0 create_cmyk_color}bd
currentdict end def/create_lab_color{LabColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocLabSpace def currentdict end}bd
/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd}bd
/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/setcmykcolor{create_cmyk_color
/separate_set_color dexec/$ffpnt xd}bd/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel16Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 612 792
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
312.92532 517.10372 508.82910 592.07726 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
359.84098 590.27074 m
368.74857 590.81698 381.11443 587.07269 385.13820 576.60208 C
387.61880 570.14759 384.38504 563.58369 379.83373 558.85039 C
375.28809 554.12249 369.67691 550.98142 363.13569 549.88668 C
360.39572 549.42831 356.96636 549.48274 355.69502 552.39109 C
355.27294 553.35770 355.87928 554.97345 356.67354 554.84901 C
368.25846 553.03427 381.49654 559.32208 385.01717 570.44863 C
386.49770 575.12750 383.39178 579.95433 376.61868 582.26258 C
364.73216 586.31357 352.08879 583.96110 341.09631 578.62460 C
335.08828 575.70803 329.93575 571.89487 325.29912 567.03288 C
302.41984 543.04271 318.75931 522.21912 333.18142 519.49304 C
352.05534 515.92564 371.88227 529.03389 387.31266 539.47134 C
403.42479 550.37027 430.92255 578.20082 460.46409 588.04129 C
481.84243 595.16164 498.81855 591.90463 508.62983 585.65225 C
509.05616 585.38126 508.73641 585.05669 508.25225 585.30132 C
498.45033 590.24920 486.23584 593.49713 463.44132 583.91376 C
433.22258 571.20831 402.10668 541.67726 388.90630 533.59228 C
371.63962 523.01707 358.63569 516.89962 344.20762 517.10910 C
328.80869 517.33276 321.14183 522.78378 316.05307 531.37956 C
305.01836 550.01962 324.02268 588.07417 359.84098 590.27074 C
@c
F

@rax %Note: Object
348.14239 496.03323 504.07370 565.61272 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
348.75751 496.06129 m
347.93405 496.08822 347.95191 496.66394 348.72406 496.72488 C
373.39654 498.66746 391.51049 514.98652 436.09890 545.22170 C
447.56957 552.99940 456.03780 560.54211 469.32491 563.81839 C
489.70800 568.84422 506.35729 563.15792 503.81660 548.68620 C
501.64696 536.32885 484.23005 529.75446 477.58535 533.98120 C
477.33109 534.14277 477.08107 534.31937 476.83587 534.51156 C
476.65191 535.01754 477.02778 535.11591 477.67946 535.19244 C
488.17786 536.42806 503.75849 545.99046 502.58976 554.65427 C
501.44003 563.17323 488.76293 565.33011 479.80658 563.78608 C
462.97247 560.88425 452.53162 550.16476 438.31701 540.96208 C
411.76205 523.76967 380.55742 495.01191 348.75751 496.06129 C
@c
F

@rax %Note: Object
327.53254 531.18170 464.71833 597.69638 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
464.09046 597.66378 m
416.40775 588.68532 376.48998 536.81102 348.19115 533.45225 C
330.93808 531.40450 321.19824 544.44756 334.90006 558.07200 C
340.52740 563.66787 356.53124 571.66980 369.95868 569.08828 C
370.97150 568.96072 371.26375 569.24731 370.58542 569.95739 C
369.74636 570.83669 368.44838 571.25282 367.35477 571.56803 C
361.10296 573.37143 354.65584 572.70331 348.64101 570.51156 C
339.00094 566.99887 331.13112 559.31556 328.49348 551.54750 C
324.21288 538.93956 334.85584 530.99235 348.16025 531.18539 C
373.96035 531.55984 406.48961 564.61833 428.18967 579.61786 C
440.21735 587.93102 452.55402 594.38806 464.13921 597.13739 C
464.92186 597.37606 464.91647 597.81969 464.09046 597.66378 C
@c
F

@rax %Note: Object
304.16117 504.55786 526.55272 579.89962 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
313.55178 541.89694 m
317.32498 545.53805 323.18476 548.47162 328.82939 550.02472 C
337.23241 552.33638 346.30866 551.03102 349.69465 543.73776 C
353.26970 536.03688 346.40702 527.50148 340.45455 524.34935 C
339.58431 524.04945 339.63052 523.88844 340.15946 523.88844 C
346.18394 525.29102 359.69159 540.88554 343.56756 550.70731 C
324.82715 562.12299 292.24006 538.00129 308.63055 516.75420 C
319.29931 502.92454 337.26104 503.08611 353.01430 506.46728 C
370.68945 510.26117 384.75043 518.19024 399.88148 527.98592 C
422.57480 542.67789 440.84948 559.79518 465.14551 571.31178 C
475.34428 576.14598 486.26957 579.16176 497.61638 578.38224 C
509.64605 577.55565 521.83502 571.95468 524.48060 558.75657 C
526.88750 546.75014 520.37263 536.35776 512.22699 528.37115 C
504.20069 520.50189 494.52151 515.03499 483.26627 513.60690 C
474.59310 512.50649 463.68822 513.81496 459.91701 522.63524 C
456.82157 529.87465 461.33802 537.73087 465.56901 542.65181 C
465.84482 542.92762 465.65802 543.58894 464.94000 542.82189 C
457.24535 534.60369 453.95773 521.58161 466.20312 512.67118 C
469.78639 510.06444 477.23556 507.97020 483.63137 508.67546 C
511.02510 511.69550 527.87480 537.03439 526.47109 555.28129 C
525.50050 567.90935 514.26028 576.69562 502.03757 578.84343 C
464.88302 585.37134 434.47039 560.34312 407.16312 539.29077 C
395.38687 530.21140 384.37143 522.05783 371.21357 515.81906 C
362.22463 511.55745 353.30598 508.20265 343.27389 506.43893 C
331.25981 504.32712 318.62296 506.29550 310.26983 515.64898 C
303.72633 522.97597 306.06463 534.67200 313.55178 541.89694 C
@c
F

@rax %Note: Object
86.44649 517.10372 282.35027 592.07726 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
235.43461 590.27074 m
226.52702 590.81698 214.16117 587.07269 210.13739 576.60208 C
207.65679 570.14759 210.89055 563.58369 215.44186 558.85039 C
219.98750 554.12249 225.59868 550.98142 232.13991 549.88668 C
234.87987 549.42831 238.30923 549.48274 239.58057 552.39109 C
240.00265 553.35770 239.39631 554.97345 238.60205 554.84901 C
227.01713 553.03427 213.77906 559.32208 210.25843 570.44863 C
208.77789 575.12750 211.88381 579.95433 218.65691 582.26258 C
230.54343 586.31357 243.18680 583.96110 254.17928 578.62460 C
260.18731 575.70803 265.33984 571.89487 269.97647 567.03288 C
292.85575 543.04271 276.51628 522.21912 262.09417 519.49304 C
243.22025 515.92564 223.39332 529.03389 207.96293 539.47134 C
191.85080 550.37027 164.35304 578.20082 134.81150 588.04129 C
113.43317 595.16164 96.45704 591.90463 86.64576 585.65225 C
86.21943 585.38126 86.53918 585.05669 87.02334 585.30132 C
96.82526 590.24920 109.03975 593.49713 131.83427 583.91376 C
162.05301 571.20831 193.16891 541.67726 206.36929 533.59228 C
223.63597 523.01707 236.63991 516.89962 251.06797 517.10910 C
266.46690 517.33276 274.13376 522.78378 279.22252 531.37956 C
290.25723 550.01962 271.25291 588.07417 235.43461 590.27074 C
@c
F

@rax %Note: Object
91.20189 496.03323 247.13320 565.61272 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
246.51808 496.06129 m
247.34154 496.08822 247.32369 496.66394 246.55153 496.72488 C
221.87906 498.66746 203.76510 514.98652 159.17669 545.22170 C
147.70602 552.99940 139.23780 560.54211 125.95068 563.81839 C
105.56759 568.84422 88.91830 563.15792 91.45899 548.68620 C
93.62863 536.32885 111.04554 529.75446 117.69024 533.98120 C
117.94450 534.14277 118.19452 534.31937 118.43972 534.51156 C
118.62369 535.01754 118.24781 535.11591 117.59613 535.19244 C
107.09773 536.42806 91.51710 545.99046 92.68583 554.65427 C
93.83556 563.17323 106.51266 565.33011 115.46901 563.78608 C
132.30312 560.88425 142.74397 550.16476 156.95858 540.96208 C
183.51354 523.76967 214.71817 495.01191 246.51808 496.06129 C
@c
F

@rax %Note: Object
130.55726 531.18170 267.74306 597.69638 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
131.18513 597.66378 m
178.86784 588.68532 218.78561 536.81102 247.08444 533.45225 C
264.33751 531.40450 274.07735 544.44756 260.37553 558.07200 C
254.74819 563.66787 238.74435 571.66980 225.31691 569.08828 C
224.30409 568.96072 224.01184 569.24731 224.69017 569.95739 C
225.52923 570.83669 226.82721 571.25282 227.92082 571.56803 C
234.17263 573.37143 240.61975 572.70331 246.63458 570.51156 C
256.27465 566.99887 264.14447 559.31556 266.78211 551.54750 C
271.06271 538.93956 260.41975 530.99235 247.11534 531.18539 C
221.31524 531.55984 188.78598 564.61833 167.08592 579.61786 C
155.05824 587.93102 142.72157 594.38806 131.13638 597.13739 C
130.35373 597.37606 130.35912 597.81969 131.18513 597.66378 C
@c
F

@rax %Note: Object
68.72287 504.55786 291.11443 579.89962 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
281.72381 541.89694 m
277.95061 545.53805 272.09083 548.47162 266.44620 550.02472 C
258.04318 552.33638 248.96693 551.03102 245.58094 543.73776 C
242.00589 536.03688 248.86857 527.50148 254.82104 524.34935 C
255.69128 524.04945 255.64507 523.88844 255.11613 523.88844 C
249.09165 525.29102 235.58400 540.88554 251.70803 550.70731 C
270.44844 562.12299 303.03553 538.00129 286.64504 516.75420 C
275.97628 502.92454 258.01455 503.08611 242.26129 506.46728 C
224.58614 510.26117 210.52517 518.19024 195.39411 527.98592 C
172.70079 542.67789 154.42611 559.79518 130.13008 571.31178 C
119.93131 576.14598 109.00602 579.16176 97.65921 578.38224 C
85.62954 577.55565 73.44057 571.95468 70.79499 558.75657 C
68.38809 546.75014 74.90296 536.35776 83.04860 528.37115 C
91.07490 520.50189 100.75408 515.03499 112.00932 513.60690 C
120.68249 512.50649 131.58737 513.81496 135.35858 522.63524 C
138.45402 529.87465 133.93757 537.73087 129.70658 542.65181 C
129.43077 542.92762 129.61757 543.58894 130.33559 542.82189 C
138.03024 534.60369 141.31786 521.58161 129.07247 512.67118 C
125.48920 510.06444 118.04003 507.97020 111.64422 508.67546 C
84.25049 511.69550 67.40079 537.03439 68.80450 555.28129 C
69.77509 567.90935 81.01531 576.69562 93.23802 578.84343 C
130.39257 585.37134 160.80520 560.34312 188.11247 539.29077 C
199.88872 530.21140 210.90416 522.05783 224.06202 515.81906 C
233.05096 511.55745 241.96961 508.20265 252.00170 506.43893 C
264.01578 504.32712 276.65263 506.29550 285.00576 515.64898 C
291.54926 522.97597 289.21096 534.67200 281.72381 541.89694 C
@c
F

@rax %Note: Object
56.92309 377.66438 306.63439 458.29077 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
239.38838 407.33235 m
226.03351 401.59020 203.27471 383.24381 179.74517 379.70646 C
152.27830 375.57751 136.22372 384.89443 129.73323 390.99827 C
112.64428 407.06957 118.74529 435.23802 140.82180 443.46926 C
172.04428 455.10973 198.90624 434.11153 213.52054 425.10869 C
229.69020 415.14746 245.35644 399.77178 265.84356 402.33912 C
286.59005 404.93906 281.72778 427.30923 259.07386 431.29389 C
253.43093 432.28687 247.83732 432.45383 243.80447 431.63320 C
232.62180 429.35811 221.22680 427.30923 193.41865 407.83550 C
175.70381 396.56636 166.24403 389.86583 144.31861 382.78913 C
137.57471 380.61241 131.06466 380.00409 125.14677 380.59030 C
102.22441 382.86113 92.55118 402.13077 100.22513 414.69647 C
108.45241 428.16813 127.40003 429.84907 131.95389 429.87118 C
171.26532 430.06110 188.11049 411.02532 213.96954 395.70094 C
233.33924 384.22261 257.19789 374.75745 279.84643 381.52063 C
310.19244 390.58243 313.65581 424.94173 290.36353 443.39896 C
272.90126 457.23628 251.29162 457.33011 230.41701 452.13250 C
218.62998 449.19780 202.37754 442.53921 197.54929 439.57672 C
195.63477 438.40205 184.00819 430.68302 169.16712 421.48857 C
139.23411 402.94403 106.03928 378.63269 57.08863 384.55087 C
56.93783 384.56929 56.77597 385.20709 57.16488 385.19376 C
104.75802 383.55959 125.54419 402.99902 159.51572 425.18438 C
173.39159 434.24589 186.00973 442.47487 194.30419 446.25770 C
221.51169 458.66608 250.13282 462.13172 275.10917 453.56967 C
278.92318 452.26261 287.68280 447.16649 291.15354 444.15128 C
316.99276 421.70655 308.48145 388.53836 280.42923 379.96923 C
256.69928 372.72104 231.80003 383.92724 212.34302 394.76466 C
195.22120 404.30183 184.99805 414.93345 163.72800 422.51074 C
134.32734 432.98476 115.03361 425.90098 107.81263 420.47745 C
87.38844 405.13861 106.36243 381.13710 127.30847 382.49405 C
148.36904 383.85865 161.66069 393.47915 186.92901 411.67531 C
204.94998 424.65203 222.65546 436.36195 248.32205 435.05887 C
254.43014 434.74876 260.09376 433.67046 264.86306 431.66608 C
285.07776 423.17036 283.63011 406.12592 270.55843 402.30028 C
246.25474 395.18702 224.90050 416.41682 200.94945 430.70088 C
169.05430 449.72362 146.73628 445.55839 136.09502 438.48850 C
114.81052 424.34702 118.59874 397.50661 137.73005 386.82737 C
144.47962 383.05956 160.50529 376.63880 181.69455 382.15757 C
206.60003 388.64381 239.80054 422.23465 265.27209 413.61307 C
254.63027 413.56375 251.15471 412.39077 239.38838 407.33235 C
@c
F

@rax %Note: Object
288.64120 377.66438 538.35250 458.29077 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
355.88721 407.33235 m
369.24208 401.59020 392.00088 383.24381 415.53043 379.70646 C
442.99729 375.57751 459.05187 384.89443 465.54236 390.99827 C
482.63131 407.06957 476.53030 435.23802 454.45380 443.46926 C
423.23131 455.10973 396.36935 434.11153 381.75506 425.10869 C
365.58539 415.14746 349.91915 399.77178 329.43203 402.33912 C
308.68554 404.93906 313.54781 427.30923 336.20173 431.29389 C
341.84466 432.28687 347.43827 432.45383 351.47112 431.63320 C
362.65380 429.35811 374.04879 427.30923 401.85694 407.83550 C
419.57178 396.56636 429.03156 389.86583 450.95698 382.78913 C
457.70088 380.61241 464.21093 380.00409 470.12882 380.59030 C
493.05118 382.86113 502.72441 402.13077 495.05046 414.69647 C
486.82318 428.16813 467.87556 429.84907 463.32170 429.87118 C
424.01027 430.06110 407.16510 411.02532 381.30605 395.70094 C
361.93635 384.22261 338.07770 374.75745 315.42917 381.52063 C
285.08315 390.58243 281.61978 424.94173 304.91206 443.39896 C
322.37433 457.23628 343.98397 457.33011 364.85858 452.13250 C
376.64561 449.19780 392.89805 442.53921 397.72630 439.57672 C
399.64082 438.40205 411.26740 430.68302 426.10847 421.48857 C
456.04148 402.94403 489.23631 378.63269 538.18696 384.55087 C
538.33776 384.56929 538.49962 385.20709 538.11071 385.19376 C
490.51757 383.55959 469.73140 402.99902 435.75987 425.18438 C
421.88400 434.24589 409.26586 442.47487 400.97140 446.25770 C
373.76391 458.66608 345.14277 462.13172 320.16643 453.56967 C
316.35241 452.26261 307.59279 447.16649 304.12205 444.15128 C
278.28283 421.70655 286.79414 388.53836 314.84636 379.96923 C
338.57631 372.72104 363.47556 383.92724 382.93257 394.76466 C
400.05439 404.30183 410.27754 414.93345 431.54759 422.51074 C
460.94825 432.98476 480.24198 425.90098 487.46296 420.47745 C
507.88715 405.13861 488.91317 381.13710 467.96712 382.49405 C
446.90655 383.85865 433.61490 393.47915 408.34658 411.67531 C
390.32561 424.65203 372.62013 436.36195 346.95354 435.05887 C
340.84545 434.74876 335.18183 433.67046 330.41254 431.66608 C
310.19783 423.17036 311.64548 406.12592 324.71717 402.30028 C
349.02085 395.18702 370.37509 416.41682 394.32614 430.70088 C
426.22129 449.72362 448.53931 445.55839 459.18057 438.48850 C
480.46507 424.34702 476.67685 397.50661 457.54554 386.82737 C
450.79597 383.05956 434.77030 376.63880 413.58104 382.15757 C
388.67556 388.64381 355.47506 422.23465 330.00350 413.61307 C
340.64532 413.56375 344.12088 412.39077 355.88721 407.33235 C
@c
F

@rax %Note: Object
174.08494 259.57106 424.44652 331.12148 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
397.03266 294.12227 m
411.17131 280.12394 398.28586 258.13984 364.02180 259.64447 C
321.73654 261.50117 258.94176 304.95600 222.08258 299.31477 C
199.04995 295.78961 198.72907 272.08743 225.97257 267.40063 C
239.04425 265.15162 256.22220 268.66913 267.59565 272.71616 C
295.35279 282.59263 339.31502 307.85783 352.30195 311.96750 C
368.48551 317.08885 378.19729 318.67512 390.05235 318.18869 C
397.26113 317.89332 404.59663 316.86520 411.15543 313.88570 C
420.13984 309.80438 431.20233 298.75861 419.15055 287.30013 C
408.78652 277.44605 390.80409 274.39228 375.72463 276.43408 C
340.90866 281.14809 287.77776 303.35641 269.69556 309.70460 C
222.11036 326.41030 203.46973 325.05137 185.84504 316.02756 C
170.07619 307.95364 166.70041 286.60450 205.94438 284.16189 C
229.74094 282.68107 265.80076 304.04069 280.36375 310.22872 C
292.15928 315.24123 302.78069 320.93773 312.65490 324.66586 C
331.58494 331.81370 347.28123 333.99780 359.83389 326.18976 C
360.17235 325.88249 359.99178 325.62794 359.60060 325.84876 C
345.49143 333.81014 330.11405 331.41458 283.14794 309.60482 C
248.35578 293.44847 226.18318 282.95235 206.65814 283.41298 C
169.50132 284.28888 166.75682 305.92715 185.24948 316.89071 C
188.99972 319.11392 193.23241 320.69452 197.46935 322.14132 C
214.65043 328.00706 231.97238 327.86022 249.56192 323.88265 C
262.11487 321.04346 344.24986 290.66117 353.00154 287.75622 C
362.32186 284.66334 371.09991 282.59461 380.91742 281.02139 C
391.25679 279.36510 401.06211 280.20699 408.65386 282.76299 C
432.45468 290.77739 426.86957 311.85156 399.35991 316.23392 C
382.33672 318.94583 370.76683 315.16498 356.67808 311.00740 C
333.17943 304.07244 303.65575 285.05622 268.23572 271.81474 C
257.08961 267.64809 245.77512 265.90961 235.97291 265.73613 C
202.29024 265.13943 192.64365 291.68674 221.55250 302.02724 C
255.68192 314.23493 303.20079 280.25745 357.04545 267.11688 C
368.89682 264.22469 381.47414 262.75890 392.60806 268.06904 C
403.56227 273.29357 406.97575 289.55565 390.47329 297.83707 C
379.13386 303.52819 363.47499 301.87729 362.90920 297.69619 C
362.64643 295.75531 366.93439 294.50211 364.48413 292.33389 C
362.99310 291.01436 360.59868 291.40157 359.57820 292.89033 C
357.08627 296.52576 360.91644 300.23603 364.47279 301.27493 C
372.32135 303.56844 388.94428 302.13014 397.03266 294.12227 C
@c
F

@rax %Note: Object
106.77430 199.88164 157.25282 250.36016 @E
/$fm 0 def
 0 O 0 @g
0.0000 0.7412 0.9490  create_rgb_color set_solid_fill
112.44359 250.36016 m
151.58353 250.36016 l
154.70164 250.36016 157.25282 247.80898 157.25282 244.69087 c
157.25282 205.55093 l
157.25282 202.43282 154.70164 199.88164 151.58353 199.88164 c
112.44359 199.88164 l
109.32548 199.88164 106.77430 202.43282 106.77430 205.55093 c
106.77430 244.69087 l
106.77430 247.80898 109.32548 250.36016 112.44359 250.36016 c
@c
F

@rax %Note: Object
118.11628 211.22334 145.91112 239.01817 @E
/$fm 0 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
120.95093 239.01817 m
143.07619 239.01817 l
144.63524 239.01817 145.91112 237.74230 145.91112 236.18353 c
145.91112 214.05827 l
145.91112 212.49921 144.63524 211.22334 143.07619 211.22334 c
120.95093 211.22334 l
119.39216 211.22334 118.11628 212.49921 118.11628 214.05827 c
118.11628 236.18353 l
118.11628 237.74230 119.39216 239.01817 120.95093 239.01817 c
@c
F

@rax %Note: Object
165.84151 211.12044 433.45616 238.95808 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000  create_rgb_color set_solid_fill
182.82047 212.53890 m
182.82047 212.15367 182.63083 211.89713 182.23965 211.75625 C
181.85443 211.62189 181.04740 211.48129 179.83077 211.33446 C
178.61386 211.19386 177.40942 211.12044 176.21121 211.12044 c
173.09906 211.12044 170.58614 212.06806 168.69090 213.96954 C
166.78942 215.87102 165.84151 218.65918 165.84151 222.33373 c
165.84151 227.72636 l
165.84151 230.59389 166.36734 232.85622 167.41899 234.52526 C
168.47065 236.18835 169.77288 237.34375 171.32598 237.99203 C
172.87285 238.63380 174.50532 238.95808 176.21121 238.95808 c
177.38504 238.95808 178.58948 238.88466 179.82454 238.74406 C
181.05959 238.59723 181.86661 238.45663 182.25184 238.30980 C
182.63083 238.16920 182.82047 237.90643 182.82047 237.52715 c
182.82047 235.06951 l
182.82047 234.55587 182.57584 234.29906 182.08687 234.29906 c
182.01940 234.29906 L
179.73893 234.48869 177.82526 234.58649 176.28463 234.58649 c
172.73820 234.58649 170.96513 232.29978 170.96513 227.72636 c
170.96513 222.33373 l
170.96513 217.76031 172.73820 215.47361 176.28463 215.47361 c
177.14665 215.47361 178.10050 215.51046 179.15187 215.58387 C
182.01940 215.77946 L
182.08687 215.77946 l
182.57584 215.77946 182.82047 215.52265 182.82047 215.00901 c
182.82047 212.53890 l
@c
202.67291 212.39235 m
202.67291 212.05587 202.53855 211.83591 202.27550 211.71969 C
202.01272 211.60970 201.16885 211.48129 199.75039 211.33446 C
198.33194 211.19386 196.98094 211.12044 195.70309 211.12044 c
192.59688 211.12044 190.40825 211.73811 189.13635 212.97317 C
187.86472 214.21417 187.22891 216.09751 187.22891 218.62857 c
187.22891 237.93704 l
187.22891 238.13858 187.30233 238.30980 187.44293 238.45663 C
187.58948 238.59723 187.76069 238.67065 187.96252 238.67065 c
191.58208 238.67065 l
191.78391 238.67065 191.96107 238.59723 192.10167 238.45663 c
192.24850 238.30980 192.31569 238.13858 192.31569 237.93704 c
192.31569 218.62857 l
192.31569 217.45474 192.51751 216.63553 192.92712 216.17065 C
193.33077 215.70605 194.08280 215.47361 195.18321 215.47361 c
201.93335 215.47361 l
202.14113 215.47361 202.31235 215.40047 202.45294 215.25987 c
202.59978 215.11304 202.67291 214.94183 202.67291 214.74000 c
202.67291 212.39235 l
@c
211.25112 212.14148 m
211.25112 211.93994 211.18394 211.76872 211.03710 211.62189 c
210.89650 211.48129 210.71934 211.40787 210.51751 211.40787 c
206.89795 211.40787 l
206.69613 211.40787 206.52491 211.48129 206.37836 211.62189 C
206.23776 211.76872 206.16435 211.93994 206.16435 212.14148 c
206.16435 237.97361 l
206.16435 238.16324 206.23153 238.32822 206.37213 238.46287 C
206.50677 238.60346 206.68394 238.67065 206.89795 238.67065 c
210.51751 238.67065 l
210.71934 238.67065 210.89650 238.60346 211.03710 238.46287 C
211.18394 238.32822 211.25112 238.16324 211.25112 237.97361 c
211.25112 212.14148 l
@c
235.68321 230.15991 m
235.68321 228.28876 235.27956 226.71156 234.46630 225.43370 c
233.65332 224.15584 232.45483 223.18980 230.87140 222.54151 C
229.29392 221.88756 227.38025 221.56328 225.13011 221.56328 c
224.46369 221.56328 223.36923 221.61231 221.85298 221.71011 C
221.85298 212.14148 l
221.85298 211.93994 221.79203 211.76872 221.65739 211.62189 c
221.52898 211.48129 221.35776 211.40787 221.15594 211.40787 c
217.49981 211.40787 l
217.29798 211.40787 217.12677 211.48129 216.98022 211.62189 C
216.83962 211.76872 216.76620 211.93994 216.76620 212.14148 c
216.76620 237.38060 l
216.76620 237.77802 216.90680 238.06545 217.18800 238.24885 c
217.46920 238.43225 218.44743 238.59723 220.12894 238.74406 C
221.80422 238.88466 223.47326 238.95808 225.13011 238.95808 c
228.56031 238.95808 231.17698 238.24261 232.98066 236.81792 C
234.78435 235.38728 235.68321 233.27802 235.68321 230.48391 c
235.68321 230.15991 l
@c
230.63301 230.15991 m
230.63301 230.48391 l
230.63301 231.96359 230.19279 233.04557 229.32454 233.72419 C
228.45005 234.40904 227.05625 234.74551 225.13011 234.74551 c
223.96252 234.74551 222.86806 234.69647 221.85298 234.58649 C
221.85298 225.86173 L
223.22863 225.79427 224.32309 225.75770 225.13011 225.75770 c
227.01940 225.75770 228.40724 226.10608 229.29987 226.80312 C
230.18655 227.50016 230.63301 228.61899 230.63301 230.15991 c
@c
242.34746 219.00161 m
241.25301 214.52598 L
240.84964 212.82633 240.62939 211.93370 240.59906 211.84809 C
240.57439 211.75625 240.49502 211.65846 240.36661 211.56066 C
240.24444 211.45691 240.10980 211.40787 239.96296 211.40787 c
236.08063 211.40787 l
235.63417 211.40787 235.41420 211.61565 235.41420 212.03773 c
235.41420 212.05587 235.42639 212.11710 235.45077 212.21490 C
241.46702 235.21606 L
242.11531 237.71083 243.81496 238.95808 246.57846 238.95808 c
249.32381 238.95808 251.01723 237.71083 251.66551 235.21606 C
257.71833 212.03773 L
257.71833 211.61565 257.49836 211.40787 257.05191 211.40787 c
253.16957 211.40787 l
252.79654 211.40787 252.56409 211.60970 252.46630 212.01931 C
250.78507 219.00161 L
242.34746 219.00161 L
@c
249.80060 223.17761 m
247.91754 230.93008 L
247.35487 233.22302 247.04306 234.42123 246.96992 234.51307 C
246.89650 234.61087 246.76809 234.65991 246.57846 234.65991 c
246.29102 234.65991 246.11386 234.55587 246.05263 234.35405 C
243.33194 223.17761 L
249.80060 223.17761 L
@c
275.14346 222.85332 m
280.89694 212.14148 L
280.95817 212.06806 280.98255 211.97650 280.98255 211.85433 c
280.98255 211.55471 280.83572 211.40787 280.53609 211.40787 c
276.06076 211.40787 l
275.88954 211.40787 275.76709 211.46287 275.68148 211.56690 C
275.60211 211.67688 275.28406 212.22709 274.73386 213.21751 C
270.03827 221.94255 L
269.53682 221.94255 l
268.87039 221.94255 267.77594 221.98535 266.25969 222.08315 C
266.25969 212.14148 l
266.25969 211.93994 266.19874 211.76872 266.06409 211.62189 c
265.93569 211.48129 265.76447 211.40787 265.56265 211.40787 c
261.90652 211.40787 l
261.70469 211.40787 261.53348 211.48129 261.38693 211.62189 C
261.24633 211.76872 261.17291 211.93994 261.17291 212.14148 c
261.17291 237.38060 l
261.17291 237.77802 261.31351 238.06545 261.59471 238.24885 c
261.87591 238.43225 262.85414 238.59723 264.53565 238.74406 C
266.21093 238.88466 267.87997 238.95808 269.53682 238.95808 c
272.93017 238.95808 275.53493 238.25480 277.35676 236.85477 C
279.17887 235.44850 280.08992 233.38800 280.08992 230.66107 c
280.08992 230.34331 l
280.08992 226.66252 278.43902 224.16803 275.14346 222.85332 C
@c
275.03972 230.34331 m
275.03972 230.66107 l
275.03972 232.02454 274.58702 233.02120 273.67625 233.64482 C
272.77115 234.27468 271.38954 234.58649 269.53682 234.58649 c
268.36923 234.58649 267.27477 234.53745 266.25969 234.44589 C
266.25969 226.18573 L
267.63534 226.11231 268.72980 226.07546 269.53682 226.07546 c
271.55452 226.07546 272.97921 226.40570 273.80466 227.06617 C
274.62387 227.72041 275.03972 228.81458 275.03972 230.34331 c
@c
302.15537 235.06951 m
302.15537 234.62929 301.91102 234.40904 301.42176 234.40904 c
294.98967 234.40904 L
294.98967 212.14148 l
294.98967 211.93994 294.92249 211.76872 294.77565 211.62189 c
294.63506 211.48129 294.45789 211.40787 294.25606 211.40787 c
290.63650 211.40787 l
290.43468 211.40787 290.26346 211.48129 290.11691 211.62189 C
289.97631 211.76872 289.90290 211.93994 289.90290 212.14148 c
289.90290 234.40904 L
283.47704 234.40904 l
282.98183 234.40904 282.73720 234.62929 282.73720 235.06951 c
282.73720 237.97361 l
282.73720 238.16324 282.81061 238.32822 282.95717 238.46287 C
283.09776 238.60346 283.26898 238.67065 283.47704 238.67065 c
301.42176 238.67065 l
301.62359 238.67065 301.80076 238.60346 301.94164 238.46287 C
302.08819 238.32822 302.15537 238.16324 302.15537 237.97361 c
302.15537 235.06951 l
@c
310.75824 221.52671 m
310.75824 221.08649 310.52580 220.86652 310.06120 220.86652 c
302.87707 220.86652 l
302.38809 220.86652 302.14346 221.08649 302.14346 221.52671 c
302.14346 223.83780 l
302.14346 224.03962 302.21688 224.21083 302.35748 224.33924 C
302.49808 224.47361 302.67524 224.53483 302.87707 224.53483 c
310.06120 224.53483 l
310.52580 224.53483 310.75824 224.30239 310.75824 223.83780 c
310.75824 221.52671 l
@c
334.78044 222.33373 m
334.78044 218.73855 333.78406 215.97506 331.79074 214.03077 C
329.79146 212.09272 326.95455 211.12044 323.26157 211.12044 c
322.10617 211.12044 320.56526 211.18167 318.63940 211.29789 C
316.71950 211.42006 315.64942 211.58532 315.42321 211.79310 C
315.20324 212.00088 315.09326 212.30674 315.09326 212.69792 c
315.09326 237.38060 l
315.09326 237.77802 315.20324 238.07764 315.41726 238.28542 c
315.63128 238.49320 316.70107 238.65846 318.62098 238.78063 C
320.54683 238.89685 322.09370 238.95808 323.26157 238.95808 c
326.95455 238.95808 329.79146 237.98580 331.79074 236.04775 C
333.78406 234.10346 334.78044 231.33373 334.78044 227.72636 c
334.78044 222.33373 l
@c
329.73024 222.33373 m
329.73024 227.72636 l
329.73024 230.30646 329.16161 232.10419 328.02435 233.12523 C
326.89332 234.14627 325.30365 234.65991 323.26157 234.65991 c
322.74794 234.65991 321.72094 234.62306 320.18003 234.54964 C
320.18003 215.51046 L
321.72094 215.43704 322.74794 215.40047 323.26157 215.40047 c
325.51767 215.40047 327.16233 215.97506 328.18961 217.12450 C
329.21660 218.26800 329.73024 220.00422 329.73024 222.33373 c
@c
354.19918 212.39235 m
354.19918 212.09272 354.11953 211.89713 353.97298 211.79310 c
353.82614 211.68907 353.05569 211.55471 351.67408 211.38350 C
350.28595 211.20605 348.56192 211.12044 346.49546 211.12044 c
343.38926 211.12044 341.20063 211.73811 339.92872 212.97317 C
338.65710 214.21417 338.02129 216.09751 338.02129 218.62857 c
338.02129 231.43153 l
338.02129 233.97506 338.65710 235.87030 339.92872 237.10535 c
341.20063 238.34041 343.38926 238.95808 346.49546 238.95808 c
348.21326 238.95808 349.86416 238.87247 351.44787 238.70721 c
353.03131 238.54224 353.88113 238.38945 354.00954 238.26104 C
354.13172 238.12639 354.19918 237.93080 354.19918 237.66803 c
354.19918 235.32009 l
354.19918 235.11827 354.12576 234.94706 353.98517 234.80050 C
353.83833 234.65991 353.66712 234.58649 353.46529 234.58649 c
345.97559 234.58649 l
344.86299 234.58649 344.10472 234.35405 343.68888 233.88945 C
343.27928 233.42485 343.07150 232.60535 343.07150 231.43153 c
343.07150 227.47578 L
353.01288 227.47578 l
353.22094 227.47578 353.39216 227.40236 353.53276 227.26176 c
353.67931 227.11493 353.74677 226.94372 353.74677 226.74189 c
353.74677 224.10680 l
353.74677 223.90498 353.67931 223.73376 353.53276 223.58721 c
353.39216 223.44661 353.22094 223.37320 353.01288 223.37320 c
343.07150 223.37320 L
343.07150 218.62857 l
343.07150 217.45474 343.27928 216.63553 343.68888 216.17065 C
344.10472 215.70605 344.86299 215.47361 345.97559 215.47361 c
353.46529 215.47361 l
353.66712 215.47361 353.83833 215.40047 353.98517 215.25987 C
354.12576 215.11304 354.19918 214.94183 354.19918 214.74000 c
354.19918 212.39235 l
@c
373.10995 234.22564 m
370.42583 234.47027 368.01694 234.58649 365.88926 234.58649 c
363.32135 234.58649 362.03726 233.71824 362.03726 231.98797 c
362.03726 231.28469 362.28813 230.70387 362.78334 230.25146 c
363.27855 229.79906 363.85313 229.38321 364.51361 229.01641 C
369.45383 226.25915 L
371.21471 225.29310 372.49852 224.22926 373.31773 223.07981 C
374.13723 221.92413 374.54060 220.49348 374.54060 218.78759 c
374.54060 217.27134 374.17380 215.92630 373.44019 214.74624 C
372.70658 213.57213 371.61808 212.67354 370.18120 212.04992 C
368.74460 211.43225 366.98372 211.12044 364.90479 211.12044 c
363.21137 211.12044 361.66450 211.22447 360.26419 211.42630 C
358.87039 211.62784 358.09370 211.81153 357.94091 211.98274 C
357.78189 212.14772 357.70847 212.31893 357.70847 212.50233 c
357.70847 215.14961 l
357.70847 215.34548 357.77594 215.50422 357.91030 215.64482 C
358.05090 215.77946 358.21616 215.85288 358.40551 215.85288 c
358.47893 215.85288 L
359.16973 215.76728 360.24605 215.68167 361.70107 215.60202 C
363.15638 215.51641 364.25055 215.47361 364.97820 215.47361 c
366.44570 215.47361 367.52173 215.72447 368.20035 216.22592 C
368.88520 216.72709 369.22139 217.58315 369.22139 218.78759 c
369.22139 219.56400 368.97676 220.19386 368.48778 220.67065 c
367.99852 221.14772 367.43613 221.57575 366.80627 221.96069 C
361.27304 225.27468 L
359.77521 226.15512 358.68076 227.11493 357.98372 228.15439 c
357.28668 229.19386 356.93830 230.47172 356.93830 231.98797 c
356.93830 236.63452 359.99518 238.95808 366.10923 238.95808 c
367.40551 238.95808 368.89739 238.86624 370.57861 238.67660 C
372.25389 238.49320 373.21398 238.32822 373.45238 238.18762 C
373.69077 238.04079 373.80699 237.84520 373.80699 237.59461 c
373.80699 234.89206 l
373.80699 234.45184 373.59921 234.22564 373.18337 234.22564 c
373.10995 234.22564 L
@c
384.03581 212.14148 m
384.03581 211.93994 383.96863 211.76872 383.82180 211.62189 c
383.68120 211.48129 383.50403 211.40787 383.30220 211.40787 c
379.68265 211.40787 l
379.48082 211.40787 379.30961 211.48129 379.16306 211.62189 C
379.02246 211.76872 378.94904 211.93994 378.94904 212.14148 c
378.94904 237.97361 l
378.94904 238.16324 379.01622 238.32822 379.15682 238.46287 C
379.29146 238.60346 379.46863 238.67065 379.68265 238.67065 c
383.30220 238.67065 l
383.50403 238.67065 383.68120 238.60346 383.82180 238.46287 C
383.96863 238.32822 384.03581 238.16324 384.03581 237.97361 c
384.03581 212.14148 l
@c
407.33660 212.62450 m
407.33660 212.29455 407.22661 212.04992 407.00041 211.89090 C
406.77420 211.73811 405.88781 211.56690 404.34094 211.38945 c
402.79408 211.21228 400.89855 211.12044 398.65465 211.12044 c
395.93991 211.12044 393.62287 212.09272 391.70296 214.04296 C
389.77710 215.98724 388.81701 218.76321 388.81701 222.37058 c
388.81701 227.65294 l
388.81701 231.30935 389.75244 234.10346 391.62359 236.04775 c
393.48822 237.98580 395.86677 238.95808 398.75868 238.95808 c
400.77638 238.95808 402.62287 238.84781 404.29191 238.63380 C
405.96718 238.42006 406.89043 238.26104 407.06759 238.15106 C
407.25099 238.04079 407.33660 237.83301 407.33660 237.52715 c
407.33660 235.06951 l
407.33660 234.55587 407.09225 234.29906 406.60299 234.29906 c
406.49896 234.29906 L
404.24287 234.48869 401.66277 234.58649 398.75868 234.58649 c
397.26680 234.58649 396.09298 233.99943 395.23068 232.81937 C
394.36866 231.64554 393.94063 229.92123 393.94063 227.65294 c
393.94063 222.37058 l
393.94063 220.15106 394.38085 218.44517 395.26753 217.25915 C
396.14797 216.06690 397.27899 215.47361 398.65465 215.47361 c
399.93874 215.47361 401.14913 215.51046 402.26825 215.58387 C
402.26825 224.95068 l
402.26825 225.15222 402.33543 225.32343 402.47603 225.47027 c
402.61039 225.61087 402.77565 225.68428 402.97124 225.68428 c
406.60299 225.68428 l
406.80482 225.68428 406.98198 225.61087 407.12258 225.47027 c
407.26942 225.32343 407.33660 225.15222 407.33660 224.95068 c
407.33660 212.62450 l
@c
433.45616 212.87537 m
433.45616 212.47172 433.30932 212.12334 433.01594 211.83591 C
432.72850 211.54847 432.38013 211.40787 431.98866 211.40787 c
428.28350 211.40787 l
427.70891 211.40787 427.26246 211.48129 426.93846 211.62189 C
426.61446 211.76872 426.31483 212.13553 426.03987 212.73477 C
417.88970 230.59389 L
417.79786 230.78353 417.68787 230.88132 417.57165 230.88132 c
417.44948 230.88132 417.38825 230.78353 417.38825 230.59389 c
417.38825 212.14148 l
417.38825 211.93994 417.32107 211.76872 417.18643 211.62189 C
417.04583 211.48129 416.88085 211.40787 416.69121 211.40787 c
413.57310 211.40787 l
413.37128 211.40787 413.20006 211.48129 413.05351 211.62189 C
412.91291 211.76872 412.83950 211.93994 412.83950 212.14148 c
412.83950 237.20315 l
412.83950 237.60680 412.98605 237.95518 413.27348 238.24261 C
413.55468 238.53005 413.90334 238.67065 414.30671 238.67065 c
418.26869 238.67065 l
418.72110 238.67065 419.05757 238.57285 419.27131 238.38321 c
419.48532 238.19386 419.68715 237.89424 419.88274 237.49058 C
428.42409 218.62857 L
428.50970 218.43298 428.60154 218.34113 428.71153 218.34113 c
428.83994 218.34113 428.90712 218.45140 428.90712 218.68356 c
428.90712 237.97361 l
428.90712 238.43820 429.13956 238.67065 429.60416 238.67065 c
432.75912 238.67065 l
433.22372 238.67065 433.45616 238.43820 433.45616 237.97361 c
433.45616 212.87537 l
@c
F

@rax %Note: Object
438.54321 211.15729 488.50129 238.92123 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.6863 0.9373  create_rgb_color set_solid_fill
441.69194 212.17833 m
441.69194 211.97650 441.63071 211.80529 441.49606 211.65846 C
441.36794 211.51786 441.19672 211.44444 440.99490 211.44444 c
439.23997 211.44444 l
439.06280 211.44444 438.89783 211.51786 438.75694 211.65846 C
438.61635 211.80529 438.54321 211.97650 438.54321 212.17833 c
438.54321 215.58387 l
438.54321 215.77323 438.61039 215.93849 438.75099 216.07285 C
438.88535 216.21345 439.05061 216.28091 439.23997 216.28091 c
440.99490 216.28091 l
441.18425 216.28091 441.34951 216.21345 441.49011 216.08504 C
441.62447 215.95068 441.69194 215.78570 441.69194 215.58387 c
441.69194 212.17833 l
@c
458.74403 223.37320 m
465.42671 212.21490 L
465.50013 212.10491 465.53669 212.00088 465.53669 211.89090 c
465.53669 211.56690 465.37767 211.40787 465.07209 211.40787 c
462.70602 211.40787 l
462.50419 211.40787 462.34517 211.42006 462.24113 211.44444 C
462.13115 211.46910 462.03959 211.52409 461.95994 211.61565 C
461.88652 211.70126 461.39754 212.49014 460.49868 213.96954 C
455.19789 222.81676 L
454.23184 222.81676 l
453.44296 222.81676 452.09792 222.85332 450.20268 222.92674 C
450.20268 212.14148 l
450.20268 211.95213 450.14145 211.78091 450.01304 211.63408 C
449.89087 211.48129 449.73184 211.40787 449.53625 211.40787 c
447.56731 211.40787 l
447.37795 211.40787 447.21893 211.48129 447.09676 211.62189 C
446.96835 211.76872 446.90712 211.93994 446.90712 212.14148 c
446.90712 237.82677 l
446.90712 238.22419 447.05395 238.46287 447.35329 238.55443 c
447.65291 238.64627 448.55178 238.72564 450.04961 238.80501 c
451.54772 238.88466 452.94180 238.92123 454.23184 238.92123 c
461.08573 238.92123 464.51565 236.29238 464.51565 231.04035 c
464.51565 230.77134 l
464.51565 228.89424 464.01420 227.31676 463.01783 226.03266 c
462.02117 224.74885 460.59647 223.86217 458.74403 223.37320 C
@c
461.20195 230.77134 m
461.20195 231.04035 l
461.20195 232.81937 460.63332 234.07880 459.50825 234.81269 C
458.37723 235.54630 456.62230 235.91310 454.23184 235.91310 c
452.10416 235.91310 450.76507 235.87654 450.20268 235.80312 C
450.20268 225.75770 L
452.33036 225.70866 453.66917 225.68428 454.23184 225.68428 c
456.77537 225.68428 458.57282 226.08170 459.62447 226.88277 c
460.67613 227.68356 461.20195 228.97984 461.20195 230.77134 c
@c
488.50129 221.31269 m
488.50129 214.54441 485.37071 211.15729 479.10983 211.15729 c
472.85518 211.15729 469.72488 214.54441 469.72488 221.31269 c
469.72488 237.97361 l
469.72488 238.16324 469.79206 238.32822 469.92047 238.46287 c
470.05483 238.60346 470.22009 238.67065 470.42192 238.67065 c
472.39654 238.67065 l
472.58617 238.67065 472.75115 238.60346 472.88580 238.46287 C
473.02639 238.32822 473.09357 238.16324 473.09357 237.97361 c
473.09357 221.31269 l
473.09357 218.84258 473.54598 217.00828 474.45704 215.80384 C
475.36186 214.60564 476.91496 214.00639 479.10983 214.00639 c
481.21313 214.00639 482.74157 214.56879 483.69543 215.70009 C
484.65553 216.82488 485.13231 218.69575 485.13231 221.31269 c
485.13231 237.97361 l
485.13231 238.16324 485.19354 238.32822 485.32791 238.46287 C
485.45631 238.60346 485.62753 238.67065 485.82935 238.67065 c
487.79802 238.67065 l
487.99361 238.67065 488.15263 238.60346 488.29323 238.46287 c
488.42787 238.32822 488.50129 238.16324 488.50129 237.97361 c
488.50129 221.31269 l
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel16Dict 16.0 0
%%EOF
